// Load processes parameters
includeConfig 'conf/base.config'
// Load resources configuration
includeConfig 'conf/resources.config'
// Load nextflow workflow report parameters
includeConfig 'conf/reports.config'

// Workdir for temporary data
workDir = "${baseDir}/work/$params.projectName"

manifest {
    name = 'samba'
    author = 'IFREMER-IRSI-SeBiMER'
    description = 'Standardized and Automated MetaBarcoding Analyses workflow developped by Ifremer SeBiMER team'
    homePage = 'https://github.com/nf-core/samba'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.01.0'
    version = '2.0.0'
}

// Execution profiles
profiles {
    conda { 
        docker.enabled = false
        singularity.enabled = false
        createTimeout = '20min'
    }
    docker {
        docker {
             enabled = true
             fixOwnership = true
             runOptions = "-u \$(id -u):\$(id -g)"
        }
        singularity.enabled = false
    }
    singularity {
        docker.enabled = false
        singularity.autoMounts = true
        singularity.enabled = true
    }
    test { 
        includeConfig 'conf/test.config'
    }
    custom {
        includeConfig 'conf/custom.config'
    }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

/****************** DATARMOR SPECIFIC CONF *****/
// Define the executor = cluster scheduler
executor {
    //check in nextflow documentation the scheduler name to match your cluster scheduler system
    name = 'pbspro'
    // according to your scheduler, adjust the exit time out (need to be high for pbspro)
    exitReadTimeout = '60min'
}

// Execution profiles
profiles {
    conda { 
        // Set path to conda binaries to run before processes
        process.beforeScript = ". /appli/anaconda/latest/etc/profile.d/conda.sh" 
    }
}

process {
    //default queue
    queue = 'sequentiel'

    //clusterOptions can be used to add some native specifications not available in the standard parameters
    clusterOptions = '-m n -S /bin/bash'

    withLabel : test_data {
        queue = 'ftp'
    }
    withLabel : qiime2_env {
        queue = 'omp'
    }
}
/****************** DATARMOR SPECIFIC CONF *****/
